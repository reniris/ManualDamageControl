<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:ManualDamageControl.Views"
        xmlns:vm="clr-namespace:ManualDamageControl.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="ManualDamageControl.Views.MainWindow"
        Title="MainWindow" Height="350" Width="300">

    <Window.Resources>
        <DataTemplate x:Key="RedBackground">
            <Grid Background="Red" >
                <TextBlock HorizontalAlignment="Center" 
					   VerticalAlignment="Center" 
					   TextAlignment="Center" 
					   Text="{Binding}"/>
            </Grid>
        </DataTemplate>
        <Style TargetType="{x:Type ToggleButton}">
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                    <Setter Property="ContentTemplate" Value="{StaticResource RedBackground}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <DataTemplate DataType="{x:Type vm:ItemViewModel}" x:Key="ItemViewModelTemplate">
        	<StackPanel Orientation="Horizontal" Margin="10">
                <Label Content="{Binding Index.Value}" />
                <CheckBox IsChecked="{Binding HasDamageControl.Value}" Margin="10" />
                <ToggleButton Content="{Binding DisplayText.Value}" IsThreeState="False" IsChecked="{Binding IsDamageControl.Value}" IsEnabled="{Binding HasDamageControl.Value}"/>
        	</StackPanel>
        </DataTemplate>
    </Window.Resources>
    
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    
    <i:Interaction.Triggers>
    
    	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>
    
	<Grid>
		<ItemsControl ItemsSource="{Binding Items}" ItemTemplate="{DynamicResource ItemViewModelTemplate}"/>
	</Grid>
</Window>
